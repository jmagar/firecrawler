[build-system]
requires = ["setuptools>=70.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "firecrawl-mcp"
version = "0.1.0"
description = "Firecrawl MCP Server - Model Context Protocol server for web scraping and crawling"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.11"
authors = [
    {name = "Mendable.ai", email = "nick@mendable.ai"}
]
maintainers = [
    {name = "Mendable.ai", email = "nick@mendable.ai"}
]
license = {text = "MIT License"}
keywords = ["MCP", "server", "firecrawl", "web-scraping", "crawling", "vector-search"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastmcp>=2.12.2",
    "firecrawl-py",
    "pydantic>=2.0",
    "httpx",
    "python-dotenv",
    "structlog",
    "uvicorn",
    "aiofiles",
    "requests>=2.32.5",
    "psutil>=5.9.0",
    "asyncpg",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx",
]

[project.urls]
"Documentation" = "https://docs.firecrawl.dev"
"Source" = "https://github.com/firecrawl/firecrawl"
"Tracker" = "https://github.com/firecrawl/firecrawl/issues"

[project.scripts]
firecrawl-mcp = "firecrawl_mcp.server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["firecrawl_mcp*"]

[tool.setuptools.package-data]
"firecrawl_mcp" = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]
exclude = [
    ".cache",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "logs",
    "node_modules",
    "venv",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG", "S101", "PLR2004"]

[tool.ruff.lint.isort]
known-first-party = ["firecrawl_mcp"]
force-single-line = false
combine-as-imports = true

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
cache_dir = ".cache/mypy"

# External library stubs
[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "firecrawl.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=firecrawl_mcp",
    "--cov-report=term-missing",
    "--cov-report=html:.cache/pytest/htmlcov",
    "--cov-report=xml:.cache/pytest/coverage.xml",
    "--junitxml=.cache/pytest/junit.xml",
]
testpaths = ["firecrawl_mcp/tests"]
cache_dir = ".cache/pytest"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["firecrawl_mcp"]
branch = true
data_file = ".cache/pytest/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = ".cache/pytest/htmlcov"

[tool.uv.sources]
firecrawl-py = { path = "../python-sdk", editable = true }

[dependency-groups]
dev = [
    "mypy>=1.18.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.0",
]
