# ===========================================
# Firecrawl MCP Server Environment Configuration
# ===========================================
# This file contains all environment variables needed to configure the
# Firecrawl MCP server. Copy this file to .env and modify values as needed.

# Firecrawl API Configuration
# ===========================================

# Required for cloud API usage, optional for self-hosted
# Get your API key from: https://firecrawl.dev/
# For testing: Use your development API key
# For production: Use your production API key with appropriate rate limits
FIRECRAWL_API_KEY=fc-your-api-key-here

# Required for self-hosted Firecrawl API, unnecessary for cloud API
# Example: http://localhost:3002 or https://your-firecrawl-domain.com
# For self-hosted: Set to your Firecrawl API server URL
# For cloud: Leave empty (uses default https://api.firecrawl.dev)
FIRECRAWL_API_BASE_URL=

# MCP Server Configuration
# ===========================================

# MCP server host address (default: localhost)
# For local development: localhost or 127.0.0.1
# For network access: 0.0.0.0 (allows external connections)
# For production: Specific IP address or domain
FIRECRAWLER_HOST=localhost

# MCP server port (default: 8000)
# Common ports: 8000, 8080, 3000
# Ensure port is not blocked by firewall in production
FIRECRAWLER_PORT=8000

# Transport method for MCP communication (default: streamable-http)
# Options: streamable-http (recommended), stdio, websocket
# streamable-http: Best for HTTP clients and web applications
# stdio: Best for command-line tools and direct integration
# websocket: Best for real-time applications
FIRECRAWLER_TRANSPORT=streamable-http

# Logging Configuration
# ===========================================

# Logging level (default: INFO)
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
FIRECRAWLER_LOG_LEVEL=INFO

# Enable/disable request logging to files (default: true)
FIRECRAWLER_LOG_TO_FILE=true

# Log file rotation size in MB (default: 5)
FIRECRAWLER_LOG_FILE_SIZE=5

# Number of backup log files to keep (default: 1)
FIRECRAWLER_LOG_BACKUP_COUNT=1

# Performance and Rate Limiting
# ===========================================

# Maximum concurrent requests (default: 10)
FIRECRAWLER_MAX_CONCURRENT=10

# Request timeout in seconds (default: 30)
FIRECRAWLER_REQUEST_TIMEOUT=30

# Rate limit: requests per minute (default: 100)
FIRECRAWLER_RATE_LIMIT_RPM=100

# Rate limit: requests per hour (default: 1000)
FIRECRAWLER_RATE_LIMIT_RPH=1000

# Enable rate limiting (default: true)
FIRECRAWLER_ENABLE_RATE_LIMIT=true

# Vector Search Configuration (for firerag tool)
# ===========================================

# OpenAI API key for LLM synthesis in firerag responses
# Only required if using OpenAI models for response generation
# Get from: https://platform.openai.com/api-keys
# For testing: Use a development key with usage limits
# For production: Use a production key with monitoring
OPENAI_API_KEY=

# Alternative: Ollama base URL for local LLM inference
# Example: http://localhost:11434
# For local development: Use Ollama for free, private LLM inference
# For production: Consider hosted Ollama or other providers
OLLAMA_BASE_URL=

# Default LLM model for firerag synthesis (default: gpt-3.5-turbo)
# For Ollama: model name (e.g., llama2, llama3, mistral, codellama)
# For OpenAI: gpt-3.5-turbo, gpt-4, gpt-4-turbo, gpt-4o
# For production: Choose model based on cost vs quality requirements
FIRECRAWLER_DEFAULT_LLM_MODEL=gpt-3.5-turbo

# Maximum tokens for LLM responses (default: 1000)
# Range: 100-8000 (depending on model)
# Higher values = more detailed responses but higher cost
FIRECRAWLER_LLM_MAX_TOKENS=1000

# Vector search result limit (default: 10)
# Range: 1-100, higher values may impact performance
# Balance between relevance and response time
FIRECRAWLER_VECTOR_SEARCH_LIMIT=10

# Vector search similarity threshold (default: 0.7)
# Range: 0.0-1.0, higher values = more strict matching
FIRECRAWLER_VECTOR_SIMILARITY_THRESHOLD=0.7

# Development and Testing
# ===========================================

# Enable development mode with additional logging (default: false)
# In dev mode: Enables verbose logging, request/response dumping
# Production: Always set to false for performance
FIRECRAWLER_DEV_MODE=false

# Enable debug mode for detailed error traces (default: false)
# In debug mode: Shows full stack traces, internal state
# Production: Only enable temporarily for troubleshooting
FIRECRAWLER_DEBUG=false

# Test mode - uses mock data when available (default: false)
# In test mode: Uses mocked responses for faster testing
# CI/CD: Can be true for testing without external dependencies
FIRECRAWLER_TEST_MODE=false

# Disable SSL verification for development (default: false)
# WARNING: Only use for local development with self-signed certificates
# Production: Must always be false for security
FIRECRAWLER_DISABLE_SSL=false

# Skip API key validation for testing (default: false)
# Testing: Can be true when using mocked responses
# Production: Must always be false
FIRECRAWLER_SKIP_API_KEY_VALIDATION=false

# Cache Configuration
# ===========================================

# Enable response caching (default: false)
FIRECRAWLER_ENABLE_CACHE=false

# Cache TTL in seconds (default: 3600 = 1 hour)
FIRECRAWLER_CACHE_TTL=3600

# Cache directory (default: .cache/responses)
FIRECRAWLER_CACHE_DIR=.cache/responses

# Middleware Configuration
# ===========================================

# Enable timing middleware (default: true)
FIRECRAWLER_ENABLE_TIMING=true

# Enable error handling middleware (default: true)
FIRECRAWLER_ENABLE_ERROR_HANDLING=true

# Enable CORS for web clients (default: false)
FIRECRAWLER_ENABLE_CORS=false

# Allowed CORS origins (comma-separated, default: *)
FIRECRAWLER_CORS_ORIGINS=*

# Security Configuration
# ===========================================

# Enable authentication for MCP server (default: false)
# Production: Recommended to enable for external access
# Development: Can be false for local testing
FIRECRAWLER_ENABLE_AUTH=false

# Bearer token for API authentication (if auth enabled)
# Generate secure random token: openssl rand -hex 32
# Production: Use strong, unique tokens and rotate regularly
FIRECRAWLER_AUTH_TOKEN=

# Allowed client IPs (comma-separated, default: all)
# Example: 192.168.1.0/24,10.0.0.0/8
# Production: Restrict to known client networks
FIRECRAWLER_ALLOWED_IPS=

# Enable request signing verification (default: false)
# Production: Recommended for high-security environments
FIRECRAWLER_ENABLE_REQUEST_SIGNING=false

# Request signature secret (if signing enabled)
# Generate with: openssl rand -base64 32
FIRECRAWLER_SIGNATURE_SECRET=

# Advanced Configuration
# ===========================================

# Custom user agent for web requests
FIRECRAWLER_USER_AGENT="Firecrawl-MCP/0.1.0"

# Connection pool size (default: 100)
FIRECRAWLER_CONNECTION_POOL_SIZE=100

# Keep-alive timeout in seconds (default: 30)
FIRECRAWLER_KEEP_ALIVE_TIMEOUT=30

# Enable HTTP/2 support (default: true)
FIRECRAWLER_HTTP2=true

# Maximum retry attempts for failed requests (default: 3)
FIRECRAWLER_MAX_RETRIES=3

# Retry backoff factor (default: 2.0)
FIRECRAWLER_RETRY_BACKOFF=2.0

# ===========================================
# DEPLOYMENT GUIDE
# ===========================================

# QUICK START (Local Development):
# 1. Copy this file to .env: cp .env.example .env
# 2. Set FIRECRAWL_API_KEY to your API key from https://firecrawl.dev/
# 3. Optionally set OPENAI_API_KEY for firerag tool
# 4. Run: python -m firecrawl_mcp.server
#
# The server will start on http://localhost:8000 with streamable-http transport

# CLOUD DEPLOYMENT CHECKLIST:
# Production Environment:
# ✓ Set FIRECRAWL_API_KEY to production API key
# ✓ Set FIRECRAWLER_HOST=0.0.0.0 for external access
# ✓ Set FIRECRAWLER_PORT to desired port (ensure firewall allows)
# ✓ Enable FIRECRAWLER_ENABLE_AUTH=true
# ✓ Set strong FIRECRAWLER_AUTH_TOKEN
# ✓ Configure FIRECRAWLER_ALLOWED_IPS for security
# ✓ Set FIRECRAWLER_LOG_LEVEL=WARNING or ERROR
# ✓ Disable FIRECRAWLER_DEV_MODE and FIRECRAWLER_DEBUG
# ✓ Configure log rotation for production volumes
# ✓ Set appropriate rate limits for your use case
# ✓ Monitor FIRECRAWLER_MAX_CONCURRENT for server capacity

# SELF-HOSTED FIRECRAWL:
# If using self-hosted Firecrawl API:
# ✓ Set FIRECRAWL_API_BASE_URL to your Firecrawl server
# ✓ FIRECRAWL_API_KEY may be optional depending on your setup
# ✓ Ensure network connectivity between MCP server and Firecrawl API
# ✓ Consider setting FIRECRAWLER_DISABLE_SSL=true for internal HTTP

# VECTOR SEARCH SETUP:
# For firerag tool functionality:
# ✓ Either set OPENAI_API_KEY or OLLAMA_BASE_URL
# ✓ Ensure your Firecrawl instance has vector search enabled
# ✓ Test vector search with small queries first
# ✓ Tune FIRECRAWLER_VECTOR_SIMILARITY_THRESHOLD based on your data

# MONITORING AND LOGGING:
# ✓ Logs are written to logs/ directory (ensure disk space)
# ✓ Monitor log files for errors and performance issues
# ✓ Use FIRECRAWLER_LOG_LEVEL=INFO for development
# ✓ Use FIRECRAWLER_LOG_LEVEL=WARNING for production
# ✓ Set up log rotation in production environments

# PERFORMANCE TUNING:
# ✓ Adjust FIRECRAWLER_MAX_CONCURRENT based on server resources
# ✓ Tune FIRECRAWLER_REQUEST_TIMEOUT for your network conditions
# ✓ Monitor rate limits and adjust FIRECRAWLER_RATE_LIMIT_* as needed
# ✓ Use FIRECRAWLER_ENABLE_CACHE=true for repeated requests
# ✓ Consider HTTP/2 (FIRECRAWLER_HTTP2=true) for better performance

# TROUBLESHOOTING:
# Connection issues:
# - Check FIRECRAWL_API_BASE_URL and network connectivity
# - Verify FIRECRAWL_API_KEY is valid and has sufficient credits
# - Enable FIRECRAWLER_DEBUG=true temporarily for detailed logs
# 
# Rate limiting:
# - Check your Firecrawl API plan limits
# - Adjust FIRECRAWLER_RATE_LIMIT_* settings
# - Monitor credit usage in logs
#
# Vector search issues:
# - Verify OPENAI_API_KEY or OLLAMA_BASE_URL configuration
# - Check if your Firecrawl instance has vector data
# - Try lowering FIRECRAWLER_VECTOR_SIMILARITY_THRESHOLD

# SECURITY BEST PRACTICES:
# ✓ Never commit .env files to version control
# ✓ Use strong, unique tokens for FIRECRAWLER_AUTH_TOKEN
# ✓ Regularly rotate API keys and tokens
# ✓ Restrict FIRECRAWLER_ALLOWED_IPS in production
# ✓ Use HTTPS in production (configure reverse proxy)
# ✓ Monitor access logs for suspicious activity
# ✓ Keep dependencies updated for security patches