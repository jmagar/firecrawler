/**
 * Shared content type constants to ensure consistency across API, SDK, and storage.
 * These values must match exactly what is generated by metadata extraction.
 */
export const CONTENT_TYPES = [
  "readme",
  "api_documentation", // Note: matches metadata extraction output
  "tutorial",
  "configuration",
  "code",
  "other",
  "general", // fallback type from metadata extraction
] as const;

export type ContentType = (typeof CONTENT_TYPES)[number];

/**
 * Legacy API-facing content types with normalized values.
 * Used for backward compatibility with existing API clients.
 */
export const API_CONTENT_TYPES = [
  "readme",
  "api-docs", // API-facing name for api_documentation
  "tutorial",
  "configuration",
  "code",
  "other",
] as const;

export type ApiContentType = (typeof API_CONTENT_TYPES)[number];

/**
 * Maps API content type names to internal metadata content types
 */
export const API_TO_INTERNAL_CONTENT_TYPE: Record<ApiContentType, ContentType> =
  {
    readme: "readme",
    "api-docs": "api_documentation",
    tutorial: "tutorial",
    configuration: "configuration",
    code: "code",
    other: "other",
  };

/**
 * Maps internal content types to API-facing names
 */
export const INTERNAL_TO_API_CONTENT_TYPE: Record<
  ContentType,
  ApiContentType | undefined
> = {
  readme: "readme",
  api_documentation: "api-docs",
  tutorial: "tutorial",
  configuration: "configuration",
  code: "code",
  other: "other",
  general: "other", // map general to other for API
};

import { logger } from "../lib/logger";

/**
 * Converts API content type to internal content type with runtime safety.
 * @param apiType - The API content type string to convert
 * @returns The corresponding internal ContentType
 */
export function apiToInternalContentType(apiType: string): ContentType {
  const internalType = API_TO_INTERNAL_CONTENT_TYPE[apiType as ApiContentType];
  if (!internalType) {
    logger.warn(`Unknown API content type: ${apiType}, defaulting to 'other'`);
    return "other";
  }
  return internalType;
}

/**
 * Converts internal content type to API content type with runtime safety.
 * @param internalType - The internal ContentType to convert
 * @returns The corresponding API content type
 */
export function internalToApiContentType(
  internalType: ContentType,
): ApiContentType {
  const apiType = INTERNAL_TO_API_CONTENT_TYPE[internalType];
  if (!apiType) {
    logger.warn(
      `Unmapped internal content type: ${internalType}, defaulting to 'other'`,
    );
    return "other";
  }
  return apiType;
}
